<h1>Edit Room</h1>

<%= form_with model: @room, local: true do |form| %>
  <div>
    <%=  form.label :name %>
    <%= form.text_field :name %>
  </div>

  <div>
    <%= form.label :description %>
    <%= form.text_area :description %>
  </div>

  <ul>
    <% @passage_ways.each_with_index do |passage_way, index| %>
      <li>

        <% adjacent_room = passage_way.to_node_from(@room)%>
        <div id="passage-display-<%= index %>">
          <inline> <%=  adjacent_room.name  %> </inline>: <%= passage_way.description %>
          <button type="button" class="edit-passage-btn" onclick="editPassageway(<%= index %>, '<%= passage_way.id %>', '<%= adjacent_room.id %>', '<%= passage_way.description %>', '<%= passage_way.kind %>', <%= passage_way.locked? %>)">Edit</button>
          <button type="button" class="delete-passage-btn" onclick="deletePassageway(<%= index %>, '<%= passage_way.id %>')">Delete</button>
        </div>
        <div id="passage-edit-<%= index %>" style="display: none;">

          <label style="margin-left: 10px;">To Room:</label>
          <select id="passage-to-room-<%= index %>" name="passages[<%= index %>][to_room_id]">
            <% @all_rooms.each do |room| %>
              <option value="<%= room.id %>" <%= adjacent_room == room ? 'selected' : '' %>><%= room.name %></option>
            <% end %>
          </select>

          <!-- memo to self check that the line below is still nessesary? -->
          <input type="hidden" id="passage-id-<%= index %>" name="passages[<%= index %>][id]" value="<%= passage_way.id %>">

          <label style="margin-left: 10px;">Description: </label>
          <input type="text" id="passage-desc-<%= index %>" name="passages[<%= index %>][description]" value="<%= passage_way.description %>">

          <label style="margin-left: 10px;">Type: </label>
          <select id="passage-kind-<%= index %>" name="passages[<%= index %>][kind]">
            <option value="standard" <%= passage_way.kind == 'standard' ? 'selected' : '' %>>Standard</option>
            <option value="arch" <%= passage_way.kind == 'arch' ? 'selected' : '' %>>Arch</option>
            <option value="hidden" <%= passage_way.kind == 'hidden' ? 'selected' : '' %>>Hidden</option>
          </select>

          <label style="margin-left: 10px;">Locked: </label>
          <input type="checkbox" id="passage-locked-<%= index %>" name="passages[<%= index %>][locked]" value="true" <%= passage_way.locked? ? 'checked' : '' %>>

          <button type="button" onclick="cancelEdit(<%= index %>)">Cancel</button>
          <button type="button" onclick="deletePassageway(<%= index %>, '<%= passage_way.id %>')">Delete</button>
        </div>
      </li>
    <% end %>
  </ul>

  <%= form.hidden_field :floor_plan, value: "{ \"arrays\": #{@matrix} }", id: "matrix_data_field" %>

  <br>
  <br>

  <div id="doorways-container">
    <!-- Doorways will be added here dynamically -->
  </div>

  <!-- Hidden container for doorway form fields -->
  <div id="doorway-fields-container">
    <!-- Doorway hidden fields will be added here -->
  </div>

  <button type="button" id="doorwayButton" onclick="addDoorwayField()" class="matrix-button">Add Doorway</button>

  <br>
  <br>

  <div>
    <%= form.submit "Save Changes" %>
  </div>
<% end %>

<a href="<%= room_path(@room) %>">Cancel</a>

<br>
<br>

<div class="matrix-container" style="border: 2px solid #333; padding: 10px; display: inline-block;">
  <div id="matrix-grid" class="matrix-grid" style="display: grid; grid-template-columns: repeat(<%= @matrix[0].size %>, 50px); gap: 5px;">
    <% @matrix.each_with_index do |row, row_index| %>
      <% row.each_with_index do |cell, col_index| %>
        <div class="square" data-row="<%= row_index %>" data-col="<%= col_index %>" style="width: 50px; height: 50px; background-color: <%= cell == 1 ? '#ffffff' : '#000000' %>;" onclick="toggleSquare(this)"></div>
      <% end %>
    <% end %>
  </div>
</div>

<div class="matrix-controls" style="margin-bottom: 10px;">
  <button type="button" id="rowButton" onclick="handleRowAction()" class="matrix-button">Add Row</button>
  <button type="button" id="colButton" onclick="handleColumnAction()" class="matrix-button">Add Column</button>

  <div class="toggle-container" style="margin-bottom: 10px;">
    <input type="checkbox" id="deleteMode" onchange="updateButtonLabels()">
    <label for="deleteMode">Delete Mode</label>
  </div>
</div>

<script>
  var matrix = <%= @matrix.to_json %>
  var doorwayCount = 0;

  document.addEventListener("DOMContentLoaded", function() {
    document.getElementById("matrix_data_field").value = JSON.stringify({ arrays: matrix });
  });

  // New functions for editing passageways
  function editPassageway(index, id, name, description, kind, locked) {
    document.getElementById(`passage-display-${index}`).style.display = 'none';
    document.getElementById(`passage-edit-${index}`).style.display = 'block';

    // Set values in the edit form (escape special characters in description)
    document.getElementById(`passage-desc-${index}`).value = description.replace(/&quot;/g, '"').replace(/&#39;/g, "'");
    document.getElementById(`passage-kind-${index}`).value = kind;
    document.getElementById(`passage-locked-${index}`).checked = locked;

    const toRoomSelect = document.getElementById(`passage-to-room-${index}`);
      if (toRoomSelect) { toRoomSelect.value = roomId; }
  }

  function cancelEdit(index) {
    // Just hide the edit form and show the display again without saving changes
    document.getElementById(`passage-display-${index}`).style.display = 'block';
    document.getElementById(`passage-edit-${index}`).style.display = 'none';
  }

  function deletePassageway(index, passageId) {
    if (confirm('Are you sure you want to delete this doorway?')) {
      // Create a hidden field to mark this passage for deletion
      const hiddenField = document.createElement('input');
      hiddenField.type = 'hidden';
      hiddenField.name = 'passages_to_delete[]';
      hiddenField.value = passageId;
      document.querySelector('form').appendChild(hiddenField);

      // Hide the passage in the UI
      document.querySelector(`li:nth-child(${index + 1})`).style.display = 'none';
    }
  }


  function addDoorwayField() {
    const doorwaysContainer = document.getElementById('doorways-container');
    const doorwayFieldsContainer = document.getElementById('doorway-fields-container');
    const doorwayId = doorwayCount++;


    const toRoomLabel = document.createElement('label');
    toRoomLabel.textContent = ' To Room: ';
    toRoomLabel.style.marginLeft = '10px';

    const toRoomSelect = document.createElement('select');
    toRoomSelect.id = `doorway_to_room_visible_${doorwayId}`;

    toRoomSelect.onchange = function () { updateDoorwayHiddenFields(doorwayId); };


    const rooms = <%= raw @all_rooms.map { |room| "{ \"id\": \"#{room.id}\", \"name\": \"#{j room.name}\" }" }.to_json %>;
    rooms.forEach(room => {
      const opt = document.createElement('option');
      room1 = JSON.parse(room)
      opt.value = room1.id;
      opt.textContent = room1.name;
      toRoomSelect.appendChild(opt);
    });

    // Create visual doorway input fields
    const doorwayDiv = document.createElement('div');
    doorwayDiv.className = 'doorway-field';
    doorwayDiv.id = `doorway-${doorwayId}`;
    doorwayDiv.style.marginBottom = '15px';

    // Create the doorway type dropdown
    const selectLabel = document.createElement('label');
    selectLabel.textContent = 'Doorway kind: ';

    const select = document.createElement('select');
    select.id = `doorway_kind_visible_${doorwayId}`;
    select.onchange = function() { updateDoorwayHiddenFields(doorwayId); };

    const option1 = document.createElement('option');
    option1.value = 'standard';
    option1.textContent = 'Standard';

    const option2 = document.createElement('option');
    option2.value = 'arch';
    option2.textContent = 'Arch';

    const option3 = document.createElement('option');
    option3.value = 'hidden';
    option3.textContent = 'Hidden';

    select.appendChild(option1);
    select.appendChild(option2);
    select.appendChild(option3);

    // Create the description field
    const descLabel = document.createElement('label');
    descLabel.textContent = ' Description: ';
    descLabel.style.marginLeft = '10px';

    const descInput = document.createElement('input');
    descInput.type = 'text';
    descInput.id = `doorway_description_visible_${doorwayId}`;
    descInput.placeholder = 'Enter doorway description';
    descInput.onchange = function() { updateDoorwayHiddenFields(doorwayId); };
    descInput.onkeyup = function() { updateDoorwayHiddenFields(doorwayId); };

    const lockedLabel = document.createElement('label');
    lockedLabel.textContent = ' Locked? ';
    lockedLabel.style.marginLeft = '10px';

    const lockedChecked = document.createElement('input');
    lockedChecked.type = 'checkbox';
    lockedChecked.value = 'true'
    lockedChecked.id = `doorway_locked_visible_${doorwayId}`;
    lockedChecked.onclick = function() { this.value = this.checked };
    lockedChecked.onchange = function() { updateDoorwayHiddenFields(doorwayId);};

    // Create remove button
    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.textContent = 'Remove';
    removeButton.className = 'remove-doorway-button';
    removeButton.onclick = function() { removeDoorway(doorwayId); };
    removeButton.style.marginLeft = '10px';

    // Append all elements to the doorway div
    doorwayDiv.appendChild(toRoomLabel);
    doorwayDiv.appendChild(toRoomSelect);

    doorwayDiv.appendChild(selectLabel);
    doorwayDiv.appendChild(select);
    doorwayDiv.appendChild(descLabel);
    doorwayDiv.appendChild(descInput);
    doorwayDiv.appendChild(lockedLabel);
    doorwayDiv.appendChild(lockedChecked);
    doorwayDiv.appendChild(removeButton);

    // Append the doorway div to the container
    doorwaysContainer.appendChild(doorwayDiv);

    // Create hidden form fields for this doorway
    const toRoomHiddenField = document.createElement('input');
    toRoomHiddenField.type = 'hidden';
    toRoomHiddenField.name = `doorways[${doorwayId}][to_room_id]`;
    toRoomHiddenField.id = `doorway_to_room_${doorwayId}`;
    toRoomHiddenField.value = '';

    const kindHiddenField = document.createElement('input');
    kindHiddenField.type = 'hidden';
    kindHiddenField.name = `doorways[${doorwayId}][kind]`;
    kindHiddenField.id = `doorway_kind_${doorwayId}`;
    kindHiddenField.value = 'standard'; // Default value

    const descHiddenField = document.createElement('input');
    descHiddenField.type = 'hidden';
    descHiddenField.name = `doorways[${doorwayId}][description]`;
    descHiddenField.id = `doorway_description_${doorwayId}`;
    descHiddenField.value = '';

    const lockedHiddenField = document.createElement('input');
    lockedHiddenField.type = 'hidden';
    lockedHiddenField.name = `doorways[${doorwayId}][locked]`;
    lockedHiddenField.id = `doorway_locked_${doorwayId}`;
    lockedHiddenField.value = 'false';

    doorwayFieldsContainer.appendChild(toRoomHiddenField);
    doorwayFieldsContainer.appendChild(kindHiddenField);
    doorwayFieldsContainer.appendChild(descHiddenField);
    doorwayFieldsContainer.appendChild(lockedHiddenField);
  }

  // Rest of the script remains the same
  function updateDoorwayHiddenFields(id) {
    const toRoomVisible = document.getElementById(`doorway_to_room_visible_${id}`);
    const kindVisible = document.getElementById(`doorway_kind_visible_${id}`);
    const descVisible = document.getElementById(`doorway_description_visible_${id}`);
    const lockedVisible = document.getElementById(`doorway_locked_visible_${id}`);

    const toRoomHidden = document.getElementById(`doorway_to_room_${id}`);
    const kindHidden = document.getElementById(`doorway_kind_${id}`);
    const descHidden = document.getElementById(`doorway_description_${id}`);
    const lockedHidden = document.getElementById(`doorway_locked_${id}`);


    if (toRoomVisible && toRoomHidden) {
      toRoomHidden.value = toRoomVisible.value;
    }

    if (kindVisible && kindHidden) {
      kindHidden.value = kindVisible.value;
    }

    if (descVisible && descHidden) {
      descHidden.value = descVisible.value;
    }

    console.log()
    if (lockedVisible && lockedHidden) {
      lockedHidden.value = lockedVisible.value;
    }
  }

  function removeDoorway(id) {
    // Remove visual element
    const doorwayElement = document.getElementById(`doorway-${id}`);
    if (doorwayElement) {
      doorwayElement.remove();
    }

    // Remove hidden fields
    const kindHidden = document.getElementById(`doorway_kind_${id}`);
    const descHidden = document.getElementById(`doorway_description_${id}`);

    if (kindHidden) kindHidden.remove();
    if (descHidden) descHidden.remove();
  }

  function updateButtonLabels() {
    const deleteMode = document.getElementById('deleteMode').checked;
    const rowButton = document.getElementById('rowButton');
    const colButton = document.getElementById('colButton');

    if (deleteMode) {
      rowButton.textContent = 'Delete Row';
      rowButton.classList.add('delete-mode');
      colButton.textContent = 'Delete Column';
      colButton.classList.add('delete-mode');
    } else {
      rowButton.textContent = 'Add Row';
      rowButton.classList.remove('delete-mode');
      colButton.textContent = 'Add Column';
      colButton.classList.remove('delete-mode');
    }
  }

  function handleRowAction() {
    const deleteMode = document.getElementById('deleteMode').checked;
    if (deleteMode) {
      deleteRow();
    } else {
      addRow();
    }
  }

  function handleColumnAction() {
    const deleteMode = document.getElementById('deleteMode').checked;
    if (deleteMode) {
      deleteColumn();
    } else {
      addColumn();
    }
  }

  function toggleSquare(square) {
    const row = square.getAttribute('data-row');
    const column = square.getAttribute('data-col');
    matrix[row][column] = matrix[row][column] == 0 ? 1 : 0;

    const currentColor = square.style.backgroundColor;
    square.style.backgroundColor = (currentColor === 'rgb(0, 0, 0)') ? '#ffffff' : '#000000';

    updateHiddenField();
  }

  function addRow() {
    const numCols = matrix[0].length;

    const newRow = Array(numCols).fill(0);

    matrix.push(newRow);

    redrawGrid();

    updateHiddenField();
  }

  function deleteRow() {
    if (matrix.length <= 1) {
      alert("Cannot delete the last row!");
      return;
    }

    matrix.pop();

    redrawGrid();

    updateHiddenField();
  }

  function addColumn() {
    for (let i = 0; i < matrix.length; i++) {
      matrix[i].push(0);
    }

    redrawGrid();

    updateHiddenField();
  }

  function deleteColumn() {
    if (matrix[0].length <= 1) {
      alert("Cannot delete the last column!");
      return;
    }

    for (let i = 0; i < matrix.length; i++) {
      matrix[i].pop();
    }

    redrawGrid();

    updateHiddenField();
  }

  function redrawGrid() {
    const gridElement = document.getElementById('matrix-grid');

    gridElement.style.gridTemplateColumns = `repeat(${matrix[0].length}, 50px)`;

    gridElement.innerHTML = '';

    for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {
      for (let colIndex = 0; colIndex < matrix[rowIndex].length; colIndex++) {
        const square = document.createElement('div');
        square.className = 'square';
        square.setAttribute('data-row', rowIndex);
        square.setAttribute('data-col', colIndex);
        square.style.width = '50px';
        square.style.height = '50px';
        square.style.backgroundColor = matrix[rowIndex][colIndex] == 1 ? '#ffffff' : '#000000';
        square.onclick = function() { toggleSquare(this); };

        gridElement.appendChild(square);
      }
    }
  }

  function updateHiddenField() {
    document.getElementById("matrix_data_field").value = JSON.stringify({ arrays: matrix });
  }
</script>

<style>
  .matrix-grid {
    margin: 20px auto;
  }
  .square {
    border: 1px solid #ccc;
    cursor: pointer;
  }
  .matrix-button {
    padding: 8px 16px;
    margin-right: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .matrix-button:hover {
    background-color: #45a049;
  }
  .delete-mode {
    background-color: #f44336;
  }
  .delete-mode:hover {
    background-color: #d32f2f;
  }
  .toggle-container {
    margin-bottom: 10px;
  }
  .toggle-container input[type="checkbox"] {
    margin-right: 5px;
  }
  .doorway-field {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #f9f9f9;
  }
  .remove-doorway-button {
    padding: 5px 10px;
    background-color: #f44336;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .remove-doorway-button:hover {
    background-color: #d32f2f;
  }
</style>
